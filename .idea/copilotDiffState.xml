<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/ser7/ClienteHora.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ser7/ClienteHora.java" />
              <option name="originalContent" value="package ser7;&#10;&#10;import java.io.IOException;&#10;import java.net.DatagramPacket;&#10;import java.net.InetAddress;&#10;import java.net.MulticastSocket;&#10;import java.util.Scanner;&#10;&#10;public class ClienteHora {&#10;&#10;    public static void main(String[] args) throws IOException {&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;        int port = 12345;&#10;        String host = &quot;225.0.0.1&quot;;&#10;&#10;        MulticastSocket socket = new MulticastSocket(port);&#10;        InetAddress grupo = InetAddress.getByName(host);&#10;        socket.joinGroup(grupo);&#10;&#10;        String msg = &quot;&quot;;&#10;        boolean corte = true;&#10;&#10;        System.out.println(&quot;Cliente conectado al multicast, recibiendo hora...&quot;);&#10;        while (corte) {&#10;&#10;            byte[] buf = new byte[1024];&#10;            DatagramPacket dp = new DatagramPacket(buf, buf.length);&#10;            // Recibir el paquete desde el socket&#10;            socket.receive(dp);&#10;            msg = new String(dp.getData(), 0, dp.getLength());&#10;            System.out.println(&quot;recibido: &quot; + msg);&#10;            System.out.println(&quot;seguir s/n&quot;);&#10;            char resp = sc.nextLine().toLowerCase().trim().charAt(0);&#10;            if (resp == 'n') {&#10;                corte = false;&#10;            }&#10;        }&#10;        System.out.println();&#10;        socket.close();&#10;        sc.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ser7;&#10;&#10;import java.io.IOException;&#10;import java.net.DatagramPacket;&#10;import java.net.InetAddress;&#10;import java.net.MulticastSocket;&#10;import java.util.Scanner;&#10;&#10;public class ClienteHora {&#10;&#10;    public static void main(String[] args) throws IOException {&#10;&#10;        Scanner sc = new Scanner(System.in);&#10;        int port = 12345;&#10;        String host = &quot;225.0.0.1&quot;;&#10;&#10;        MulticastSocket socket = new MulticastSocket(port);&#10;        InetAddress grupo = InetAddress.getByName(host);&#10;        socket.joinGroup(grupo);&#10;&#10;        String msg = &quot;&quot;;&#10;        boolean corte = true;&#10;&#10;        System.out.println(&quot;Cliente conectado al multicast, recibiendo hora...&quot;);&#10;        while (corte) {&#10;&#10;            byte[] buf = new byte[1024];&#10;            DatagramPacket dp = new DatagramPacket(buf, buf.length);&#10;            // Recibir el paquete desde el socket&#10;            socket.receive(dp);&#10;            msg = new String(dp.getData(), 0, dp.getLength());&#10;            System.out.println(&quot;recibido: &quot; + msg);&#10;            System.out.println(&quot;seguir s/n&quot;);&#10;            char resp = sc.nextLine().toLowerCase().trim().charAt(0);&#10;            if (resp == 'n') {&#10;                corte = false;&#10;            }&#10;        }&#10;        System.out.println();&#10;        socket.close();&#10;        sc.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ser7/ServidorHora.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ser7/ServidorHora.java" />
              <option name="originalContent" value="package ser7;&#10;&#10;import java.io.IOException;&#10;import java.net.DatagramPacket;&#10;import java.net.InetAddress;&#10;import java.net.MulticastSocket;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeFormatter;&#10;&#10;public class ServidorHora {&#10;&#10;    public static void main(String[] args) throws IOException {&#10;&#10;        int port = 12345;&#10;        String host = &quot;225.0.0.1&quot;;&#10;&#10;        MulticastSocket socket = new MulticastSocket(port);&#10;        InetAddress grupo = InetAddress.getByName(host);&#10;&#10;        socket.joinGroup(grupo);&#10;        String cadena = &quot;&quot;;&#10;&#10;        System.out.println();&#10;        while (true) {&#10;&#10;            try {&#10;                Thread.sleep(5000);&#10;                cadena = obtenerHoraActualYFecha();&#10;            } catch (InterruptedException e) {&#10;                e.printStackTrace();&#10;            }&#10;&#10;            // Usar la cadena con la fecha/hora como contenido del paquete&#10;            byte[] buf = cadena.getBytes();&#10;            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length, grupo, port);&#10;            socket.send(datagramPacket);&#10;            System.out.println(&quot;Enviando: &quot; + cadena);&#10;&#10;&#10;        }&#10;&#10;    }&#10;&#10;    //metodo que nos da la hora actual&#10;&#10;    public static String obtenerHoraActualYFecha() {&#10;        // Obtenemos la hora actual&#10;        LocalTime horaActual = LocalTime.now();&#10;        LocalDate fechaActual = LocalDate.now();&#10;&#10;        // usar yyyy en minúsculas para el año calendario&#10;        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;        String fechaFormateada = fechaActual.format(dtf);&#10;        // Formateamos la hora&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;HH:mm:ss&quot;);&#10;        String horaFormateada = horaActual.format(formatter);&#10;&#10;        // Devolvemos una cadena con la fecha y la hora&#10;        return &quot;Fecha: &quot; + fechaFormateada + &quot;, Hora actual: &quot; + horaFormateada;&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package ser7;&#10;&#10;import java.io.IOException;&#10;import java.net.DatagramPacket;&#10;import java.net.InetAddress;&#10;import java.net.MulticastSocket;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeFormatter;&#10;&#10;public class ServidorHora {&#10;&#10;    public static void main(String[] args) throws IOException {&#10;&#10;        int port = 12345;&#10;        String host = &quot;225.0.0.1&quot;;&#10;&#10;        MulticastSocket socket = new MulticastSocket(port);&#10;        InetAddress grupo = InetAddress.getByName(host);&#10;&#10;        socket.joinGroup(grupo);&#10;        String cadena = &quot;&quot;;&#10;&#10;        System.out.println();&#10;        while (true) {&#10;&#10;            try {&#10;                Thread.sleep(5000);&#10;                cadena = obtenerHoraActualYFecha();&#10;            } catch (InterruptedException e) {&#10;                e.printStackTrace();&#10;            }&#10;&#10;            // Usar la cadena con la fecha/hora como contenido del paquete&#10;            byte[] buf = cadena.getBytes();&#10;            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length, grupo, port);&#10;            socket.send(datagramPacket);&#10;            System.out.println(&quot;Enviando: &quot; + cadena);&#10;&#10;&#10;        }&#10;&#10;    }&#10;&#10;    //metodo que nos da la hora actual&#10;&#10;    public static String obtenerHoraActualYFecha() {&#10;        // Obtenemos la hora actual&#10;        LocalTime horaActual = LocalTime.now();&#10;        LocalDate fechaActual = LocalDate.now();&#10;&#10;        // usar yyyy en minúsculas para el año calendario&#10;        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;        String fechaFormateada = fechaActual.format(dtf);&#10;        // Formateamos la hora&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;HH:mm:ss&quot;);&#10;        String horaFormateada = horaActual.format(formatter);&#10;&#10;        // Devolvemos una cadena con la fecha y la hora&#10;        return &quot;Fecha: &quot; + fechaFormateada + &quot;, Hora actual: &quot; + horaFormateada;&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>